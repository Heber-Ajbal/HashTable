/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Controller.HashTables;
import Model.Cities;
import Model.Countries;
import Model.States;
import grafos.connection.connection;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.CellRangeAddress;
import org.apache.poi.ss.usermodel.*;
/**
 *
 * @author Heber
 */
public class frmHash extends javax.swing.JFrame {

    connection con = new connection();
    Connection connect;
    Statement st;
    ResultSet rs;
    DefaultTableModel tableModel;
    
    HashTables hash = new HashTables();
    
    public frmHash() {
        initComponents();
    }
    
    public void LoadCountry(){
        try{
            String sql = "SELECT * FROM countries";       
            connect = con.gertConnection();            
            st = connect.createStatement();
            rs = st.executeQuery(sql);
            
            Object[] country = new Object[3];
            tableModel = (DefaultTableModel) tblCountry.getModel();
            tableModel.setRowCount(0);
            while(rs.next()){
                Countries hashcountry = new Countries( Integer.parseInt( rs.getString("id")), rs.getString("name"), rs.getString("iso")) ;
                country[0] = rs.getString("id");
                country[1] = rs.getString("name");                
                country[2] = rs.getString("iso");
                tableModel.addRow(country);
                hash.addCountry(hashcountry);
            }
             tblCountry.setModel(tableModel);
             hash.FindHashTable();
        }catch(Exception e){
            System.out.println(e.toString());
        }    
    }

public void LoadState(){
    try{
        String sql = "SELECT * FROM states";      
        connect = con.gertConnection();
        st = connect.createStatement();
        rs = st.executeQuery(sql);

        Object[] state = new Object[3];
        tableModel = (DefaultTableModel) tblState.getModel();
        tableModel.setRowCount(0);
        while(rs.next()){
            States hashState = new States( Integer.parseInt( rs.getString("id")),Integer.parseInt( rs.getString("id_country")), rs.getString("name"), rs.getString("iso")) ;
            state[0] = rs.getString("id");             
            state[1] = rs.getString("name");                          
            state[2] = rs.getString("iso");            
            tableModel.addRow(state);
            hash.addState(hashState);
        }
         tblState.setModel(tableModel);
         hash.FindHashTable();
    }catch(Exception e){
        System.out.println(e.toString());
    }    
}

public void LoadCity(){
    try{
        String sql = "SELECT * FROM cities";      
        connect = con.gertConnection();
        st = connect.createStatement();
        rs = st.executeQuery(sql);

        Object[] city = new Object[3];
        tableModel = (DefaultTableModel) tblCity.getModel();
        tableModel.setRowCount(0);
        while(rs.next()){
            Cities hashCities = new Cities( Integer.parseInt( rs.getString("id")),Integer.parseInt( rs.getString("id_state")), rs.getString("name"), rs.getString("iso")) ;
            city[0] = rs.getString("id");             
            city[1] = rs.getString("name");                          
            city[2] = rs.getString("iso");           
            tableModel.addRow(city);
            hash.addCity(hashCities);
        }
         tblCity.setModel(tableModel);
         hash.FindHashTable();
    }catch(Exception e){
        System.out.println(e.toString());
    }    
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblState = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCountry = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblCity = new javax.swing.JTable();
        btnSearch = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        btnState = new javax.swing.JButton();
        txtSearch1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtSearch2 = new javax.swing.JTextField();
        btnCity = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblState.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nombre", "ISO"
            }
        ));
        tblState.setFocusable(false);
        tblState.setIntercellSpacing(new java.awt.Dimension(0, 0));
        tblState.setRowHeight(25);
        tblState.setSelectionBackground(new java.awt.Color(243, 83, 58));
        tblState.getTableHeader().setReorderingAllowed(false);
        tblState.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblStateMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblState);

        tblCountry.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nombre", "ISO"
            }
        ));
        tblCountry.setFocusable(false);
        tblCountry.setIntercellSpacing(new java.awt.Dimension(0, 0));
        tblCountry.setRowHeight(25);
        tblCountry.setSelectionBackground(new java.awt.Color(243, 83, 58));
        tblCountry.getTableHeader().setReorderingAllowed(false);
        tblCountry.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCountryMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblCountry);

        tblCity.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nombre", "ISO"
            }
        ));
        tblCity.setFocusable(false);
        tblCity.setIntercellSpacing(new java.awt.Dimension(0, 0));
        tblCity.setRowHeight(25);
        tblCity.setSelectionBackground(new java.awt.Color(243, 83, 58));
        tblCity.getTableHeader().setReorderingAllowed(false);
        tblCity.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCityMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblCity);

        btnSearch.setText("Buscar");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        jLabel1.setText("Buscar Pais:");

        btnState.setText("Buscar");
        btnState.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStateActionPerformed(evt);
            }
        });

        jLabel2.setText("Buscar Estado:");

        jLabel3.setText("Buscar Municipio:");

        btnCity.setText("Buscar");
        btnCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCityActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(26, 26, 26)
                        .addComponent(txtSearch2, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(btnCity))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(34, 34, 34)
                        .addComponent(txtSearch1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(btnState))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(51, 51, 51)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)
                        .addComponent(btnSearch))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearch)
                    .addComponent(jLabel1)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnState)
                    .addComponent(jLabel2)
                    .addComponent(txtSearch1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCity)
                    .addComponent(jLabel3)
                    .addComponent(txtSearch2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblStateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblStateMouseClicked
    
    }//GEN-LAST:event_tblStateMouseClicked

    private void tblCountryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCountryMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tblCountryMouseClicked

    private void tblCityMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCityMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tblCityMouseClicked

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        long startTime = System.currentTimeMillis();
        Countries country = hash.getCountryWithStatesAndCitiesByIso(txtSearch.getText());
        if (country != null) {
            
                DefaultTableModel tableModelState = (DefaultTableModel) tblState.getModel();      
                tableModelState.setRowCount(0);
                DefaultTableModel tableModelCity = (DefaultTableModel) tblCity.getModel();      
                tableModelCity.setRowCount(0);
                
                tableModel = (DefaultTableModel) tblCountry.getModel();
                tableModel.setRowCount(0);
                Object[] rowData = new Object[3];
                rowData[0] = country.getId(); 
                rowData[1] = country.getName(); 
                rowData[2] = country.getISO();
                tableModel.addRow(rowData);
                tblCountry.setModel(tableModel);
                
               for(States satate: country.getStates()){                  
             
                    Object[] rowState = new Object[3];
                    rowState[0] = satate.getId(); 
                    rowState[1] = satate.getName(); 
                    rowState[2] = satate.getISO();
                    tableModelState.addRow(rowState);   
                    
                    for(Cities city: satate.getCities()){
                        Object[] rowCity = new Object[3];
                        rowCity[0] = city.getId(); 
                        rowCity[1] = city.getName(); 
                        rowCity[2] = city.getISO();
                        tableModelCity.addRow(rowCity);
                    }
                }
               tblCity.setModel(tableModelCity);
               tblState.setModel(tableModelState);
                
                
        } else {
            JOptionPane.showMessageDialog(null, "ISO incorrecto", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        long endTime = System.currentTimeMillis();
        long duration = endTime - startTime;
        System.out.println("El tiempo de ejecución fue: " + duration + " Milisegundos.");
        
        
    // Crear el archivo Excel
String filePath = "pais.xls";
    File file = new File(filePath);
    Workbook workbook;
    Sheet sheet;

    if (file.exists()) {
        try (FileInputStream fileIn = new FileInputStream(file)) {
            workbook = new HSSFWorkbook(fileIn);
            sheet = workbook.getSheetAt(0);
        } catch (IOException e) {
            e.printStackTrace();
            return;
        }
    } else {
        workbook = new HSSFWorkbook();
        sheet = workbook.createSheet("PAIS ");

        // Crear la fila y las celdas de encabezado
        Row headerRow = sheet.createRow(0);
        Cell headerCell1 = headerRow.createCell(0);
        Cell headerCell2 = headerRow.createCell(1);

        headerCell1.setCellValue("ISO Pais");
        headerCell2.setCellValue("Tiempo");
        
    }

        
    // Determinar la siguiente fila vacía
    int lastRowNum = sheet.getLastRowNum();
    Row newRow = sheet.createRow(lastRowNum + 1);
    Cell newCell1 = newRow.createCell(0);
    Cell newCell2 = newRow.createCell(1);

    newCell1.setCellValue(txtSearch.getText());
    newCell2.setCellValue(duration + " ms");

    // Guardar el archivo Excel
    try (FileOutputStream fileOut = new FileOutputStream(filePath)) {
        workbook.write(fileOut);
    } catch (IOException e) {
        e.printStackTrace();
    }
        
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStateActionPerformed
         long startTime = System.currentTimeMillis();
          States states = hash.getStateByIso(txtSearch1.getText());
          
          if(states != null){
              
              DefaultTableModel tableModelState = (DefaultTableModel) tblState.getModel();      
                tableModelState.setRowCount(0);
                DefaultTableModel tableModelCity = (DefaultTableModel) tblCity.getModel();      
                tableModelCity.setRowCount(0);
                
                    Object[] rowState = new Object[3];
                    rowState[0] = states.getId(); 
                    rowState[1] = states.getName(); 
                    rowState[2] = states.getISO();
                    tableModelState.addRow(rowState);    
                    tblState.setModel(tableModelState);
                    
                Countries country = hash.getCountryById(states.getCountryId());
                
                
                tableModel = (DefaultTableModel) tblCountry.getModel();
                tableModel.setRowCount(0);
                Object[] rowData = new Object[3];
                rowData[0] = country.getId(); 
                rowData[1] = country.getName(); 
                rowData[2] = country.getISO();
                tableModel.addRow(rowData);
                tblCountry.setModel(tableModel);
                
                for(Cities city: states.getCities()){
                        Object[] rowCity = new Object[3];
                        rowCity[0] = city.getId(); 
                        rowCity[1] = city.getName(); 
                        rowCity[2] = city.getISO();
                        tableModelCity.addRow(rowCity);
                    }
              
               tblCity.setModel(tableModelCity);
              
          }else{
              JOptionPane.showMessageDialog(null, "ISO incorrecto", "Error", JOptionPane.ERROR_MESSAGE);
              return;
          }
          
           long endTime = System.currentTimeMillis();
        long duration = endTime - startTime;
        System.out.println("El tiempo de ejecución fue: " + duration + " Milisegundos.");
        
        
    String filePath = "Departamento.xls";
    File file = new File(filePath);
    Workbook workbook;
    Sheet sheet;

    if (file.exists()) {
        try (FileInputStream fileIn = new FileInputStream(file)) {
            workbook = new HSSFWorkbook(fileIn);
            sheet = workbook.getSheetAt(0);
        } catch (IOException e) {
            e.printStackTrace();
            return;
        }
    } else {
        workbook = new HSSFWorkbook();
        sheet = workbook.createSheet("DEPARTAMENTO ");

        // Crear la fila y las celdas de encabezado
        Row headerRow = sheet.createRow(0);
        Cell headerCell1 = headerRow.createCell(0);
        Cell headerCell2 = headerRow.createCell(1);

        headerCell1.setCellValue("ISO Departamento");
        headerCell2.setCellValue("Tiempo");
        
    }

        
    // Determinar la siguiente fila vacía
    int lastRowNum = sheet.getLastRowNum();
    Row newRow = sheet.createRow(lastRowNum + 1);
    Cell newCell1 = newRow.createCell(0);
    Cell newCell2 = newRow.createCell(1);

    newCell1.setCellValue(txtSearch1.getText());
    newCell2.setCellValue(duration + " ms");

    // Guardar el archivo Excel
    try (FileOutputStream fileOut = new FileOutputStream(filePath)) {
        workbook.write(fileOut);
    } catch (IOException e) {
        e.printStackTrace();
    }
    
    }//GEN-LAST:event_btnStateActionPerformed

    private void btnCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCityActionPerformed
         long startTime = System.currentTimeMillis();
          Cities city = hash.getCityByIso(txtSearch2.getText());
          
          if(city != null){
              
              DefaultTableModel tableModelState = (DefaultTableModel) tblState.getModel();      
                tableModelState.setRowCount(0);
                DefaultTableModel tableModelCity = (DefaultTableModel) tblCity.getModel();      
                tableModelCity.setRowCount(0);
                
                    Object[] rowcity = new Object[3];
                    rowcity[0] = city.getId(); 
                    rowcity[1] = city.getName(); 
                    rowcity[2] = city.getISO();
                    tableModelCity.addRow(rowcity);    
                    tblState.setModel(tableModelCity);
                    
                States state = hash.getStateById(city.getStateId());
                
                Object[] rowState = new Object[3];
                rowState[0] = state.getId(); 
                rowState[1] = state.getName(); 
                rowState[2] = state.getISO();
                tableModelState.addRow(rowState);
                tblState.setModel(tableModelState);
                
                Countries country = hash.getCountryById(state.getCountryId());

                tableModel = (DefaultTableModel) tblCountry.getModel();
                tableModel.setRowCount(0);
                Object[] rowCountry = new Object[3];
                rowCountry[0] = country.getId(); 
                rowCountry[1] = country.getName(); 
                rowCountry[2] = country.getISO();
                tableModel.addRow(rowCountry);               
              
                tblCountry.setModel(tableModel);
               tblCity.setModel(tableModelCity);
              
          }else{
              JOptionPane.showMessageDialog(null, "ISO incorrecto", "Error", JOptionPane.ERROR_MESSAGE);
              return;
          }
          
           long endTime = System.currentTimeMillis();
        long duration = endTime - startTime;
        System.out.println("El tiempo de ejecución fue: " + duration + " Milisegundos.");
        
        
    String filePath = "Municipio.xls";
    File file = new File(filePath);
    Workbook workbook;
    Sheet sheet;

    if (file.exists()) {
        try (FileInputStream fileIn = new FileInputStream(file)) {
            workbook = new HSSFWorkbook(fileIn);
            sheet = workbook.getSheetAt(0);
        } catch (IOException e) {
            e.printStackTrace();
            return;
        }
    } else {
        workbook = new HSSFWorkbook();
        sheet = workbook.createSheet("MUNICIPIO ");

        // Crear la fila y las celdas de encabezado
        Row headerRow = sheet.createRow(0);
        Cell headerCell1 = headerRow.createCell(0);
        Cell headerCell2 = headerRow.createCell(1);

        headerCell1.setCellValue("ISO Municipio");
        headerCell2.setCellValue("Tiempo");
        
    }

        
    // Determinar la siguiente fila vacía
    int lastRowNum = sheet.getLastRowNum();
    Row newRow = sheet.createRow(lastRowNum + 1);
    Cell newCell1 = newRow.createCell(0);
    Cell newCell2 = newRow.createCell(1);

    newCell1.setCellValue(txtSearch2.getText());
    newCell2.setCellValue(duration + " ms");

    // Guardar el archivo Excel
    try (FileOutputStream fileOut = new FileOutputStream(filePath)) {
        workbook.write(fileOut);
    } catch (IOException e) {
        e.printStackTrace();
    }
    }//GEN-LAST:event_btnCityActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmHash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmHash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmHash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmHash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmHash().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCity;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnState;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tblCity;
    private javax.swing.JTable tblCountry;
    private javax.swing.JTable tblState;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtSearch1;
    private javax.swing.JTextField txtSearch2;
    // End of variables declaration//GEN-END:variables
}
